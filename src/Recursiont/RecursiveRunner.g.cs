// <auto-generated/>
#nullable enable

using System.Runtime.CompilerServices;

namespace Recursiont;

partial class RecursiveRunner
{
    /// <summary>
    /// Runs a recursive function that does not return a result.
    /// </summary>
    /// <param name="recursiveAction">The recursive function to run. It should be an
    /// <see langword="async"/> function that returns <see cref="RecursiveOp"/>.</param>
    /// <exception cref="ArgumentNullException"><paramref name="recursiveAction"/> is <see langword="null"/>.</exception>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static void Run(Func<RecursiveOp> recursiveAction)
    {
        ArgumentNullExceptionCompat.ThrowIfNull(recursiveAction);

        using (var ctx = SetupRunnerFrame())
        {
            ctx.Runner.Evaluate(recursiveAction());
        }
    }

    /// <summary>
    /// Runs a recursive function that returns a result.
    /// </summary>
    /// <param name="recursiveFunc">The recursive function to run. It should be an
    /// <see langword="async"/> function that returns <see cref="RecursiveOp{TResult}"/>.</param>
    /// <exception cref="ArgumentNullException"><paramref name="recursiveFunc"/> is <see langword="null"/>.</exception>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static TResult Run<TResult>(Func<RecursiveOp<TResult>> recursiveFunc)
    {
        ArgumentNullExceptionCompat.ThrowIfNull(recursiveFunc);

        using (var ctx = SetupRunnerFrame())
        {
            return ctx.Runner.Evaluate(recursiveFunc());
        }
    }

    /// <summary>
    /// Runs a recursive function that accepts one parameters and does not return a result.
    /// </summary>
    /// <param name="recursiveAction">The recursive function to run. It should be an
    /// <see langword="async"/> function that returns <see cref="RecursiveOp"/>.</param>
    /// <param name="arg1">The first argument to <paramref name="recursiveAction"/>.</param>
    /// <exception cref="ArgumentNullException"><paramref name="recursiveAction"/> is <see langword="null"/>.</exception>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static void Run<T1>(Func<T1, RecursiveOp> recursiveAction, T1 arg1)
    {
        ArgumentNullExceptionCompat.ThrowIfNull(recursiveAction);

        using (var ctx = SetupRunnerFrame())
        {
            ctx.Runner.Evaluate(recursiveAction(arg1));
        }
    }

    /// <summary>
    /// Runs a recursive function that accepts one parameters and returns a result.
    /// </summary>
    /// <param name="recursiveFunc">The recursive function to run. It should be an
    /// <see langword="async"/> function that returns <see cref="RecursiveOp{TResult}"/>.</param>
    /// <param name="arg1">The first argument to <paramref name="recursiveFunc"/>.</param>
    /// <exception cref="ArgumentNullException"><paramref name="recursiveFunc"/> is <see langword="null"/>.</exception>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static TResult Run<T1, TResult>(Func<T1, RecursiveOp<TResult>> recursiveFunc, T1 arg1)
    {
        ArgumentNullExceptionCompat.ThrowIfNull(recursiveFunc);

        using (var ctx = SetupRunnerFrame())
        {
            return ctx.Runner.Evaluate(recursiveFunc(arg1));
        }
    }

    /// <summary>
    /// Runs a recursive function that accepts two parameters and does not return a result.
    /// </summary>
    /// <param name="recursiveAction">The recursive function to run. It should be an
    /// <see langword="async"/> function that returns <see cref="RecursiveOp"/>.</param>
    /// <param name="arg1">The first argument to <paramref name="recursiveAction"/>.</param>
    /// <param name="arg2">The second argument to <paramref name="recursiveAction"/>.</param>
    /// <exception cref="ArgumentNullException"><paramref name="recursiveAction"/> is <see langword="null"/>.</exception>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static void Run<T1, T2>(Func<T1, T2, RecursiveOp> recursiveAction, T1 arg1, T2 arg2)
    {
        ArgumentNullExceptionCompat.ThrowIfNull(recursiveAction);

        using (var ctx = SetupRunnerFrame())
        {
            ctx.Runner.Evaluate(recursiveAction(arg1, arg2));
        }
    }

    /// <summary>
    /// Runs a recursive function that accepts two parameters and returns a result.
    /// </summary>
    /// <param name="recursiveFunc">The recursive function to run. It should be an
    /// <see langword="async"/> function that returns <see cref="RecursiveOp{TResult}"/>.</param>
    /// <param name="arg1">The first argument to <paramref name="recursiveFunc"/>.</param>
    /// <param name="arg2">The second argument to <paramref name="recursiveFunc"/>.</param>
    /// <exception cref="ArgumentNullException"><paramref name="recursiveFunc"/> is <see langword="null"/>.</exception>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static TResult Run<T1, T2, TResult>(Func<T1, T2, RecursiveOp<TResult>> recursiveFunc, T1 arg1, T2 arg2)
    {
        ArgumentNullExceptionCompat.ThrowIfNull(recursiveFunc);

        using (var ctx = SetupRunnerFrame())
        {
            return ctx.Runner.Evaluate(recursiveFunc(arg1, arg2));
        }
    }

    /// <summary>
    /// Runs a recursive function that accepts three parameters and does not return a result.
    /// </summary>
    /// <param name="recursiveAction">The recursive function to run. It should be an
    /// <see langword="async"/> function that returns <see cref="RecursiveOp"/>.</param>
    /// <param name="arg1">The first argument to <paramref name="recursiveAction"/>.</param>
    /// <param name="arg2">The second argument to <paramref name="recursiveAction"/>.</param>
    /// <param name="arg3">The third argument to <paramref name="recursiveAction"/>.</param>
    /// <exception cref="ArgumentNullException"><paramref name="recursiveAction"/> is <see langword="null"/>.</exception>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static void Run<T1, T2, T3>(Func<T1, T2, T3, RecursiveOp> recursiveAction, T1 arg1, T2 arg2, T3 arg3)
    {
        ArgumentNullExceptionCompat.ThrowIfNull(recursiveAction);

        using (var ctx = SetupRunnerFrame())
        {
            ctx.Runner.Evaluate(recursiveAction(arg1, arg2, arg3));
        }
    }

    /// <summary>
    /// Runs a recursive function that accepts three parameters and returns a result.
    /// </summary>
    /// <param name="recursiveFunc">The recursive function to run. It should be an
    /// <see langword="async"/> function that returns <see cref="RecursiveOp{TResult}"/>.</param>
    /// <param name="arg1">The first argument to <paramref name="recursiveFunc"/>.</param>
    /// <param name="arg2">The second argument to <paramref name="recursiveFunc"/>.</param>
    /// <param name="arg3">The third argument to <paramref name="recursiveFunc"/>.</param>
    /// <exception cref="ArgumentNullException"><paramref name="recursiveFunc"/> is <see langword="null"/>.</exception>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static TResult Run<T1, T2, T3, TResult>(Func<T1, T2, T3, RecursiveOp<TResult>> recursiveFunc, T1 arg1, T2 arg2, T3 arg3)
    {
        ArgumentNullExceptionCompat.ThrowIfNull(recursiveFunc);

        using (var ctx = SetupRunnerFrame())
        {
            return ctx.Runner.Evaluate(recursiveFunc(arg1, arg2, arg3));
        }
    }

    /// <summary>
    /// Runs a recursive function that accepts four parameters and does not return a result.
    /// </summary>
    /// <param name="recursiveAction">The recursive function to run. It should be an
    /// <see langword="async"/> function that returns <see cref="RecursiveOp"/>.</param>
    /// <param name="arg1">The first argument to <paramref name="recursiveAction"/>.</param>
    /// <param name="arg2">The second argument to <paramref name="recursiveAction"/>.</param>
    /// <param name="arg3">The third argument to <paramref name="recursiveAction"/>.</param>
    /// <param name="arg4">The fourth argument to <paramref name="recursiveAction"/>.</param>
    /// <exception cref="ArgumentNullException"><paramref name="recursiveAction"/> is <see langword="null"/>.</exception>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static void Run<T1, T2, T3, T4>(Func<T1, T2, T3, T4, RecursiveOp> recursiveAction, T1 arg1, T2 arg2, T3 arg3, T4 arg4)
    {
        ArgumentNullExceptionCompat.ThrowIfNull(recursiveAction);

        using (var ctx = SetupRunnerFrame())
        {
            ctx.Runner.Evaluate(recursiveAction(arg1, arg2, arg3, arg4));
        }
    }

    /// <summary>
    /// Runs a recursive function that accepts four parameters and returns a result.
    /// </summary>
    /// <param name="recursiveFunc">The recursive function to run. It should be an
    /// <see langword="async"/> function that returns <see cref="RecursiveOp{TResult}"/>.</param>
    /// <param name="arg1">The first argument to <paramref name="recursiveFunc"/>.</param>
    /// <param name="arg2">The second argument to <paramref name="recursiveFunc"/>.</param>
    /// <param name="arg3">The third argument to <paramref name="recursiveFunc"/>.</param>
    /// <param name="arg4">The fourth argument to <paramref name="recursiveFunc"/>.</param>
    /// <exception cref="ArgumentNullException"><paramref name="recursiveFunc"/> is <see langword="null"/>.</exception>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static TResult Run<T1, T2, T3, T4, TResult>(Func<T1, T2, T3, T4, RecursiveOp<TResult>> recursiveFunc, T1 arg1, T2 arg2, T3 arg3, T4 arg4)
    {
        ArgumentNullExceptionCompat.ThrowIfNull(recursiveFunc);

        using (var ctx = SetupRunnerFrame())
        {
            return ctx.Runner.Evaluate(recursiveFunc(arg1, arg2, arg3, arg4));
        }
    }

    /// <summary>
    /// Runs a recursive function that accepts five parameters and does not return a result.
    /// </summary>
    /// <param name="recursiveAction">The recursive function to run. It should be an
    /// <see langword="async"/> function that returns <see cref="RecursiveOp"/>.</param>
    /// <param name="arg1">The first argument to <paramref name="recursiveAction"/>.</param>
    /// <param name="arg2">The second argument to <paramref name="recursiveAction"/>.</param>
    /// <param name="arg3">The third argument to <paramref name="recursiveAction"/>.</param>
    /// <param name="arg4">The fourth argument to <paramref name="recursiveAction"/>.</param>
    /// <param name="arg5">The fifth argument to <paramref name="recursiveAction"/>.</param>
    /// <exception cref="ArgumentNullException"><paramref name="recursiveAction"/> is <see langword="null"/>.</exception>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static void Run<T1, T2, T3, T4, T5>(Func<T1, T2, T3, T4, T5, RecursiveOp> recursiveAction, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5)
    {
        ArgumentNullExceptionCompat.ThrowIfNull(recursiveAction);

        using (var ctx = SetupRunnerFrame())
        {
            ctx.Runner.Evaluate(recursiveAction(arg1, arg2, arg3, arg4, arg5));
        }
    }

    /// <summary>
    /// Runs a recursive function that accepts five parameters and returns a result.
    /// </summary>
    /// <param name="recursiveFunc">The recursive function to run. It should be an
    /// <see langword="async"/> function that returns <see cref="RecursiveOp{TResult}"/>.</param>
    /// <param name="arg1">The first argument to <paramref name="recursiveFunc"/>.</param>
    /// <param name="arg2">The second argument to <paramref name="recursiveFunc"/>.</param>
    /// <param name="arg3">The third argument to <paramref name="recursiveFunc"/>.</param>
    /// <param name="arg4">The fourth argument to <paramref name="recursiveFunc"/>.</param>
    /// <param name="arg5">The fifth argument to <paramref name="recursiveFunc"/>.</param>
    /// <exception cref="ArgumentNullException"><paramref name="recursiveFunc"/> is <see langword="null"/>.</exception>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static TResult Run<T1, T2, T3, T4, T5, TResult>(Func<T1, T2, T3, T4, T5, RecursiveOp<TResult>> recursiveFunc, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5)
    {
        ArgumentNullExceptionCompat.ThrowIfNull(recursiveFunc);

        using (var ctx = SetupRunnerFrame())
        {
            return ctx.Runner.Evaluate(recursiveFunc(arg1, arg2, arg3, arg4, arg5));
        }
    }

    /// <summary>
    /// Runs a recursive function that accepts six parameters and does not return a result.
    /// </summary>
    /// <param name="recursiveAction">The recursive function to run. It should be an
    /// <see langword="async"/> function that returns <see cref="RecursiveOp"/>.</param>
    /// <param name="arg1">The first argument to <paramref name="recursiveAction"/>.</param>
    /// <param name="arg2">The second argument to <paramref name="recursiveAction"/>.</param>
    /// <param name="arg3">The third argument to <paramref name="recursiveAction"/>.</param>
    /// <param name="arg4">The fourth argument to <paramref name="recursiveAction"/>.</param>
    /// <param name="arg5">The fifth argument to <paramref name="recursiveAction"/>.</param>
    /// <param name="arg6">The sixth argument to <paramref name="recursiveAction"/>.</param>
    /// <exception cref="ArgumentNullException"><paramref name="recursiveAction"/> is <see langword="null"/>.</exception>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static void Run<T1, T2, T3, T4, T5, T6>(Func<T1, T2, T3, T4, T5, T6, RecursiveOp> recursiveAction, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6)
    {
        ArgumentNullExceptionCompat.ThrowIfNull(recursiveAction);

        using (var ctx = SetupRunnerFrame())
        {
            ctx.Runner.Evaluate(recursiveAction(arg1, arg2, arg3, arg4, arg5, arg6));
        }
    }

    /// <summary>
    /// Runs a recursive function that accepts six parameters and returns a result.
    /// </summary>
    /// <param name="recursiveFunc">The recursive function to run. It should be an
    /// <see langword="async"/> function that returns <see cref="RecursiveOp{TResult}"/>.</param>
    /// <param name="arg1">The first argument to <paramref name="recursiveFunc"/>.</param>
    /// <param name="arg2">The second argument to <paramref name="recursiveFunc"/>.</param>
    /// <param name="arg3">The third argument to <paramref name="recursiveFunc"/>.</param>
    /// <param name="arg4">The fourth argument to <paramref name="recursiveFunc"/>.</param>
    /// <param name="arg5">The fifth argument to <paramref name="recursiveFunc"/>.</param>
    /// <param name="arg6">The sixth argument to <paramref name="recursiveFunc"/>.</param>
    /// <exception cref="ArgumentNullException"><paramref name="recursiveFunc"/> is <see langword="null"/>.</exception>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static TResult Run<T1, T2, T3, T4, T5, T6, TResult>(Func<T1, T2, T3, T4, T5, T6, RecursiveOp<TResult>> recursiveFunc, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6)
    {
        ArgumentNullExceptionCompat.ThrowIfNull(recursiveFunc);

        using (var ctx = SetupRunnerFrame())
        {
            return ctx.Runner.Evaluate(recursiveFunc(arg1, arg2, arg3, arg4, arg5, arg6));
        }
    }
}
